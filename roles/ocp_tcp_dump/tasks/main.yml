---
- name: OCP | TCP Dump Role | Log in (obtain access token)
  k8s_auth:
    username: "{{ ocp_username }}"
    password: "{{ ocp_password }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
  register: k8s_auth_results
  when: (ocp_token is not defined or ocp_token == "")

- name: OCP | TCP Dump | Set the OCP API token value
  set_fact:  
    token: "{% if ocp_token is defined and ocp_token != '' %}{{ ocp_token }} {% else %}{{ k8s_auth_results.k8s_auth.api_key }}{% endif %}"
  no_log: true

- name: OCP | TCP Dump | Check if the pod exists, and get the Node Name
  shell: |
    curl -ks \
    -H "Authorization: Bearer {{ token }}" \
    -H 'Accept: application/json' \
    "{{ api_url }}/api/v1/namespaces/{{ namespace }}/pods/{{ pod_name }}" | jq -r '.spec.nodeName'
  register: check_pod_exist
  failed_when: "'null' in check_pod_exist"

- name: OCP | TCP Dump | Set the OCP API token value
  set_fact:
    node_name: "{{ check_pod_exist.stdout | trim }}"

# Task for creating Debugger Pod to take TCP Dump
- name: OCP | TCP Dump Role | Create Debugger Pod
  k8s:
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    state: present
    definition: "{{ lookup('template', 'debugger-pod.yml.j2') | from_yaml }}"
    force: true
    validate:
      fail_on_error: no
      strict: yes

# Task for deleting Debugger Pod
- name: OCP | TCP Dump Role | Create Debugger Pod
  k8s:
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    state: absent
    definition: "{{ lookup('template', 'debugger-pod.yml.j2') | from_yaml }}"
    wait: yes
    wait_condition:
      reason: "PodCompleted"
      type: "Ready"
      status: "False"

