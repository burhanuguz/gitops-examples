---
- name: OCP | Project Role | Log in (obtain access token)
  k8s_auth:
    username: "{{ ocp_username }}"
    password: "{{ ocp_password }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
#    validate_certs: false
  register: k8s_auth_results
  when: (ocp_token is not defined or ocp_token == "")

- name: OCP | Project | Set the OCP API token value
  set_fact:  
    token: "{% if ocp_token is defined and ocp_token != '' %}{{ ocp_token }} {% else %}{{ k8s_auth_results.k8s_auth.api_key }}{% endif %}"
    project_exists: false
  no_log: true

- name: Check if the pod exists, and get the Node Name
  shell: |
    curl -ks \
    -H "Authorization: Bearer {{ token }}" \
    -H 'Accept: application/json' \
    "{{ api_url }}/api/v1/namespaces/{{ namespace }}/pods/{{ pod_name }}" | jq -r '.spec.nodeName'
  register: check_pod_exist
  failed_when: "'null' in check_pod_exist"

- name: OCP | Limits | Set the OCP API token value
  set_fact:
    node_name: "{{ check_pod_exist.stdout | trim }}"

- name: test
  shell: echo {{ node_name }}

# Task for set Resource Limits to project
- name: OCP | Limits Role | Set Project Limits
  k8s:
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    state: present
    definition: "{{ lookup('template', 'debugger-pod.yml.j2') | from_yaml }}"
    force: true
    validate:
      fail_on_error: no
      strict: yes

#- name: Get TCP Dump
#  shell: |
#    oc exec -it -q {{ node_name }}-{{ ansible_role_name }}-{{ tower_job_id }} -n default -- chroot /host <<"EOT"
#    pod_pid=$(crictl inspect $(crictl ps -q) | grep '"io.kubernetes.pod.name": "{{ pod_name }}"' -A 100 | grep pid  |head -1 | awk '{print $2}' | sed 's/,*$//g')
#    podman run -it --rm --name rhel-tools --privileged --ipc=host --net=host --pid=host \
#    -e HOST=/host \
#    -e NAME=rhel-tools \
#    -e IMAGE=registry.redhat.io/rhel7/rhel-tools \
#    -v /run:/run \
#    -v /var/log:/var/log \
#    -v /etc/localtime:/etc/localtime \
#    -v /:/host/ \
#    registry.redhat.io/rhel7/rhel-tools \
#    timeout {{ timeout }}s nsenter -t $pod_pid -n -- tcpdump -i any -nn -w /host/mnt/{{ node_name }}-{{ namespace }}-{{ pod_name }}-$(date +"%m-%d-%Y-%H-%M-%S").pcap
#    EOF
#  ignore_errors: true

